/*
  Buttercup compiler - WebAssembly text file (Wat) code generator.
  Copyright (C) 2020-2021 Ariel Ortiz, ITESM CEM

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Text;
using System.Collections.Generic;

namespace Drac {

    class WatVisitor {
        IDictionary<string, Type> table;
        static readonly IDictionary<Type, string> PrintInstructions =
            new Dictionary<Type, string>() {
                { Type.BOOL, "print_bool" },
                { Type.INT, "print_int" }
            };

         IDictionary<string, Type> GlobalFunctionsTable;
         IDictionary<string, Type> GlobalVariablesTable;
        public WatVisitor(IDictionary<string, Type> GlobalFunctionsTable, IDictionary<string, Type> GlobalVariablesTable) {
            this.GlobalFunctionsTable = GlobalFunctionsTable;
            this.GlobalVariablesTable=GlobalVariablesTable;
        }

        public string Visit(True node) {
            return "    i32.const 1\n";
        }

       
        public string Visit(False node) {
            return "    i32.const 0\n";
        }

       
        public string Visit(Neg node) {
            return "    i32.const 0\n"
                + Visit((dynamic) node[0])
                + "    i32.sub\n";
        }

        
        public string Visit(And node) {
            return VisitBinaryOperator("i32.and", node);
        }

        
        public string Visit(Less node) {
            return VisitBinaryOperator("i32.lt_s", node);
        }


        public void Visit(Program node)
        {
            
            

            var stringCode = new StringBuilder();
            // stringCode.Append(";; Generated by the drac compiler "
            //     + "(module\n");
            // stringCode.Append($"\t\t(import \"drac\" \"printi\" (func $printi (param i32) (result i32)))\n");
            //  stringCode.Append($"\t\t(import \"drac\" \"printc\" (func $printc (param i32) (result i32)))\n");
            //  stringCode.Append($"\t\t(import \"drac\" \"prints\" (func $prints (param i32) (result i32)))\n");
            //  stringCode.Append($"\t\t(import \"drac\" \"println\" (func $println (param i32) (result i32)))\n");
            //  stringCode.Append($"\t\t(import \"drac\" \"readi\" (func $readi (param i32) (result i32)))\n");
            //  stringCode.Append($"\t\t(import \"drac\" \"reads\" (func $reads (param i32) (result i32)))\n");
            //  stringCode.Append($"\t\t(import \"drac\" \"new\" (func $new (param i32) (result i32)))\n");
            //  stringCode.Append($"\t\t(import \"drac\" \"size\" (func $size (param i32) (result i32)))\n");
            //  stringCode.Append($"\t\t(import \"drac\" \"add\" (func $add (param i32) (result i32)))\n");
            //  stringCode.Append($"\t\t(import \"drac\" \"get\" (func $get (param i32) (result i32)))\n");
            //  stringCode.Append($"\t\t(import \"drac\" \"set\" (func $set (param i32) (result i32)))\n");

            return ";; WebAssembly text format code generated by "
                + "the drac compiler.\n\n"
                + "(module\n"
                + "\t\t(import \"drac\" \"printi\" (func $printi (param i32) (result i32)))\n"
                + "\t\t(import \"drac\" \"printc\" (func $printc (param i32) (result i32)))\n"
                +"\t\t(import \"drac\" \"prints\" (func $prints (param i32) (result i32)))\n"
                +"\t\t(import \"drac\" \"println\" (func $println (param i32) (result i32)))\n"
                +"\t\t(import \"drac\" \"readi\" (func $readi (param i32) (result i32)))\n"
                +"\t\t(import \"drac\" \"reads\" (func $reads (param i32) (result i32)))\n"
                +"\t\t(import \"drac\" \"new\" (func $new (param i32) (result i32)))\n"
                +"\t\t(import \"drac\" \"size\" (func $size (param i32) (result i32)))\n"
                +"\t\t(import \"drac\" \"add\" (func $add (param i32) (result i32)))\n"
                +"\t\t(import \"drac\" \"get\" (func $get (param i32) (result i32)))\n"
                +"\t\t(import \"drac\" \"set\" (func $set (param i32) (result i32)))\n"
                + "  (func\n"
                + "    (export \"start\")\n"
                + "    (result i32)\n"
                + Visit((dynamic) node[0])
                + Visit((dynamic) node[1])
                + "    i32.const 0\n"
                + "  )\n"
                + ")\n";
            
        }

        public string Visit(Def node){
            return VisitChildren(node);
        }

        public string Visit(VarDef node){
            return VisitChildren(node);
        }

        public string Visit(FunDef node){
            var stringCode = new StringBuilder();
            functionName = node.AnchorToken.Lexeme;

            if (functionName.Contains("main"))
            {
                
                stringCode.Append($"\t\t(func" + $"\t(export \"{functionName}\")\n");
            
            stringCode.Append(Visit((dynamic) node[2]));
            stringCode.Append("\t\t\t(result i32)\n");
            stringCode.Append("\t\t\ti32.const 42\n");
            stringCode.Append("\t\t)\n");
            }
            return stringCode.ToString();

        }





        public WatVisitor(IDictionary<string, Type> table) {
            this.table = table;
        }


       
        public string Visit(Plus node) {
            return VisitBinaryOperator("i32.add", node);
        }

        
        public string Visit(Mul node) {
            return VisitBinaryOperator("i32.mul", node);
        }

        public string Visit(Print node) {
            return Visit((dynamic) node[0])
                + $"    call ${PrintInstructions[node.ExpressionType]}\n";
        }

        string VisitChildren(Node node) {
            var sb = new StringBuilder();
            foreach (var n in node) {
                sb.Append(Visit((dynamic) n));
            }
            return sb.ToString();
        }


    }
}
